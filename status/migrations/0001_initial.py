# Generated by Django 3.0.2 on 2022-12-20 01:05

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import multiselectfield.db.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Affiliation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('affiliation', models.CharField(blank=True, max_length=500, null=True)),
            ],
            options={
                'verbose_name_plural': 'affiliations',
            },
        ),
        migrations.CreateModel(
            name='AnnotationTeam',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
                ('affiliation', models.ManyToManyField(to='status.Affiliation')),
            ],
            options={
                'verbose_name_plural': 'annotation teams',
            },
        ),
        migrations.CreateModel(
            name='AssemblyPipeline',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Pipeline name', max_length=30)),
                ('version', models.CharField(help_text='Version', max_length=10)),
                ('contigger', models.CharField(help_text='Main assembler', max_length=30)),
                ('scaffolder', models.CharField(help_text='Scaffolder (can be the same as assembler)', max_length=30)),
                ('url', models.CharField(blank=True, help_text='URL', max_length=300, null=True)),
                ('description', models.TextField(blank=True, help_text='Full description of pipeline', max_length=2000, null=True)),
            ],
            options={
                'verbose_name_plural': 'assembly pipelines',
            },
        ),
        migrations.CreateModel(
            name='AssemblyTeam',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
                ('affiliation', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name_plural': 'assembly teams',
            },
        ),
        migrations.CreateModel(
            name='BUSCOdb',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('db', models.CharField(db_index=True, max_length=60)),
            ],
            options={
                'verbose_name_plural': 'BUSCO dbs',
            },
        ),
        migrations.CreateModel(
            name='BUSCOversion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.CharField(db_index=True, max_length=10)),
            ],
            options={
                'verbose_name_plural': 'BUSCO versions',
            },
        ),
        migrations.CreateModel(
            name='CollectionTeam',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('affiliation', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(blank=True, max_length=100, null=True)),
                ('middle_name', models.CharField(blank=True, max_length=100, null=True)),
                ('last_name', models.CharField(blank=True, max_length=100, null=True)),
                ('orcid', models.CharField(blank=True, max_length=40, null=True)),
                ('affiliation', models.ManyToManyField(to='status.Affiliation')),
            ],
            options={
                'verbose_name_plural': 'people',
            },
        ),
        migrations.CreateModel(
            name='SampleCollection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('genomic_sample_status', models.CharField(choices=[('Waiting', 'Waiting'), ('Sampling', 'Sampling'), ('Resampling', 'Resampling'), ('COPO', 'COPO'), ('Submitted', 'Submitted'), ('Issue', 'Issue')], default='Waiting', help_text='Status', max_length=12)),
                ('rna_sample_status', models.CharField(choices=[('Waiting', 'Waiting'), ('Sampling', 'Sampling'), ('Resampling', 'Resampling'), ('COPO', 'COPO'), ('Submitted', 'Submitted'), ('Issue', 'Issue')], default='Waiting', help_text='Status', max_length=12)),
                ('note', models.CharField(blank=True, help_text='Notes', max_length=300, null=True)),
            ],
            options={
                'verbose_name_plural': 'collection',
            },
        ),
        migrations.CreateModel(
            name='TaxonClass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name_plural': 'classes',
            },
        ),
        migrations.CreateModel(
            name='TaxonFamily',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('taxon_class', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='status.TaxonClass', verbose_name='Kingdom')),
            ],
            options={
                'verbose_name_plural': 'families',
            },
        ),
        migrations.CreateModel(
            name='TaxonKingdom',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name_plural': 'kingdoms',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('roles', multiselectfield.db.fields.MultiSelectField(choices=[('assembly_team_lead', 'Assembly Team Lead'), ('sequencing_team_lead', 'Sequencing Team Lead'), ('annotation_team_lead', 'Annotation Team Lead'), ('sample_coordinator', 'Sample Coordinator'), ('genome_team_coordinator', 'Genome Team Coordinator'), ('sample_reception', 'Sample Reception'), ('assembly_curation', 'Assembly Curation')], max_length=138)),
                ('affiliation', models.ManyToManyField(to='status.Affiliation')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TaxonPhylum',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('taxon_kingdom', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='status.TaxonKingdom', verbose_name='Kingdom')),
            ],
            options={
                'verbose_name_plural': 'phyla',
            },
        ),
        migrations.CreateModel(
            name='TaxonOrder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('taxon_class', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='status.TaxonClass', verbose_name='Kingdom')),
                ('taxon_kingdom', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='status.TaxonKingdom', verbose_name='Kingdom')),
                ('taxon_phylum', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='status.TaxonPhylum', verbose_name='Kingdom')),
            ],
            options={
                'verbose_name_plural': 'orders',
            },
        ),
        migrations.CreateModel(
            name='TaxonomyTeam',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('affiliation', models.CharField(max_length=100)),
                ('coordinator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='taxonomy_team_lead', to='status.Person')),
            ],
        ),
        migrations.CreateModel(
            name='TaxonGenus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('taxon_class', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='status.TaxonClass', verbose_name='Kingdom')),
                ('taxon_family', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='status.TaxonFamily', verbose_name='Kingdom')),
                ('taxon_kingdom', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='status.TaxonKingdom', verbose_name='Kingdom')),
                ('taxon_order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='status.TaxonOrder', verbose_name='Kingdom')),
                ('taxon_phylum', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='status.TaxonPhylum', verbose_name='Kingdom')),
            ],
            options={
                'verbose_name_plural': 'genera',
            },
        ),
        migrations.AddField(
            model_name='taxonfamily',
            name='taxon_kingdom',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='status.TaxonKingdom', verbose_name='Kingdom'),
        ),
        migrations.AddField(
            model_name='taxonfamily',
            name='taxon_order',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='status.TaxonOrder', verbose_name='Kingdom'),
        ),
        migrations.AddField(
            model_name='taxonfamily',
            name='taxon_phylum',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='status.TaxonPhylum', verbose_name='Kingdom'),
        ),
        migrations.AddField(
            model_name='taxonclass',
            name='taxon_kingdom',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='status.TaxonKingdom', verbose_name='Kingdom'),
        ),
        migrations.AddField(
            model_name='taxonclass',
            name='taxon_phylum',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='status.TaxonPhylum', verbose_name='Kingdom'),
        ),
        migrations.CreateModel(
            name='TargetSpecies',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scientific_name', models.CharField(blank=True, db_index=True, max_length=201, null=True)),
                ('tolid_prefix', models.CharField(blank=True, db_index=True, max_length=12, null=True)),
                ('chromosome_number', models.IntegerField(blank=True, null=True)),
                ('haploid_number', models.IntegerField(blank=True, null=True)),
                ('ploidy', models.IntegerField(blank=True, null=True)),
                ('taxon_id', models.CharField(db_index=True, max_length=20, unique=True)),
                ('c_value', models.DecimalField(blank=True, decimal_places=3, max_digits=8, null=True, verbose_name='C-value')),
                ('genome_size', models.BigIntegerField(blank=True, null=True)),
                ('taxon_class', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='status.TaxonClass', verbose_name='Class')),
                ('taxon_family', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='status.TaxonFamily', verbose_name='Family')),
                ('taxon_genus', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='status.TaxonGenus', verbose_name='Genus')),
                ('taxon_kingdom', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='status.TaxonKingdom', verbose_name='Kingdom')),
                ('taxon_order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='status.TaxonOrder', verbose_name='Order')),
                ('taxon_phylum', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='status.TaxonPhylum', verbose_name='Phylum')),
            ],
            options={
                'verbose_name_plural': 'species',
                'ordering': ['taxon_kingdom', 'taxon_phylum', 'taxon_class', 'taxon_order', 'taxon_family', 'taxon_genus', 'scientific_name'],
            },
        ),
        migrations.CreateModel(
            name='Synonyms',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=201, null=True)),
                ('species', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='status.TargetSpecies', verbose_name='Genus/species')),
            ],
            options={
                'verbose_name_plural': 'synonyms',
            },
        ),
        migrations.CreateModel(
            name='SubmissionTeam',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
                ('affiliation', models.ManyToManyField(to='status.Affiliation')),
                ('lead', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='submission_team_lead', to='status.Person')),
            ],
            options={
                'verbose_name_plural': 'submission teams',
            },
        ),
        migrations.CreateModel(
            name='Submission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('Waiting', 'Waiting'), ('Submitted', 'Submitted'), ('Issue', 'Issue')], default='Waiting', help_text='Status', max_length=12)),
                ('datatype', models.CharField(choices=[('DNA', 'DNA'), ('RNA', 'RNA'), ('Assembly', 'Assembly'), ('Annotation', 'Annotation')], default='DNA', help_text='Data Type', max_length=12)),
                ('accession', models.CharField(blank=True, help_text='ENA Accession Number', max_length=20, null=True)),
                ('note', models.CharField(blank=True, help_text='Notes', max_length=300, null=True)),
                ('species', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='status.TargetSpecies', verbose_name='species')),
                ('team', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='status.SubmissionTeam', verbose_name='submission team')),
            ],
            options={
                'verbose_name_plural': 'submission',
            },
        ),
        migrations.CreateModel(
            name='Specimen',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('specimen_id', models.CharField(help_text='Internal Specimen ID', max_length=20)),
                ('barcode', models.CharField(help_text='Tube barcode', max_length=20)),
                ('tolid', models.CharField(blank=True, help_text='Registered ToLID for the Specimen', max_length=20, null=True)),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='status.SampleCollection', verbose_name='Collection')),
            ],
        ),
        migrations.CreateModel(
            name='SequencingTeam',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
                ('affiliation', models.ManyToManyField(to='status.Affiliation')),
                ('delivery', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='data_delivery', to='status.Person')),
                ('lead', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sequencing_team_lead', to='status.Person')),
                ('reception', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sample_reception', to='status.Person')),
            ],
            options={
                'verbose_name_plural': 'sequencing teams',
            },
        ),
        migrations.CreateModel(
            name='Sequencing',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('genomic_seq_status', models.CharField(choices=[('Waiting', 'Waiting'), ('Sequencing', 'Sequencing'), ('TopUp', 'TopUp'), ('External', 'External'), ('Submitted', 'Submitted'), ('Done', 'Done'), ('Issue', 'Issue')], default='Waiting', help_text='Status', max_length=12)),
                ('hic_seq_status', models.CharField(choices=[('Waiting', 'Waiting'), ('Sequencing', 'Sequencing'), ('TopUp', 'TopUp'), ('External', 'External'), ('Submitted', 'Submitted'), ('Done', 'Done'), ('Issue', 'Issue')], default='Waiting', help_text='Status', max_length=12)),
                ('rna_seq_status', models.CharField(choices=[('Waiting', 'Waiting'), ('Sequencing', 'Sequencing'), ('TopUp', 'TopUp'), ('External', 'External'), ('Submitted', 'Submitted'), ('Done', 'Done'), ('Issue', 'Issue')], default='Waiting', help_text='Status', max_length=12)),
                ('note', models.CharField(blank=True, help_text='Notes', max_length=300, null=True)),
                ('ont_target', models.BigIntegerField(blank=True, null=True, verbose_name='ONT target')),
                ('hifi_target', models.BigIntegerField(blank=True, null=True, verbose_name='HiFi target')),
                ('hic_target', models.BigIntegerField(blank=True, null=True, verbose_name='Hi-C target')),
                ('short_target', models.BigIntegerField(blank=True, null=True, verbose_name='Short read target')),
                ('rnaseq_numlibs_target', models.IntegerField(blank=True, null=True, verbose_name='RNAseq libs target')),
                ('species', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='status.TargetSpecies', verbose_name='species')),
                ('team', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='status.SequencingTeam', verbose_name='sequencing team')),
            ],
            options={
                'verbose_name_plural': 'sequencing',
            },
        ),
        migrations.AddField(
            model_name='samplecollection',
            name='species',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='status.TargetSpecies', verbose_name='species'),
        ),
        migrations.AddField(
            model_name='samplecollection',
            name='team',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='status.CollectionTeam', verbose_name='collection team'),
        ),
        migrations.CreateModel(
            name='Sample',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('biosampleAccession', models.CharField(blank=True, help_text='BioSample Accession', max_length=20, null=True, verbose_name='BioSample')),
                ('tolid', models.CharField(blank=True, help_text='Registered ToLID for the Specimen', max_length=20, null=True, verbose_name='ToLID')),
                ('specimen_id', models.CharField(blank=True, help_text='Internal Specimen ID', max_length=30, null=True)),
                ('barcode', models.CharField(blank=True, help_text='Tube barcode', max_length=20, null=True)),
                ('sample_coordinator', models.CharField(blank=True, help_text='Sample coordinator', max_length=50, null=True)),
                ('purpose_of_specimen', models.CharField(blank=True, help_text='Purpose', max_length=30, null=True)),
                ('gal', models.CharField(blank=True, help_text='GAL', max_length=120, null=True, verbose_name='GAL')),
                ('collector_sample_id', models.CharField(blank=True, help_text='Collector Sample ID', max_length=40, null=True)),
                ('copo_date', models.CharField(blank=True, help_text='COPO Time Updated', max_length=30, null=True, verbose_name='date')),
                ('species', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='status.TargetSpecies', verbose_name='species')),
            ],
        ),
        migrations.CreateModel(
            name='Reads',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ont_yield', models.BigIntegerField(blank=True, null=True, verbose_name='ONT yield')),
                ('hifi_yield', models.BigIntegerField(blank=True, null=True, verbose_name='HiFi yield')),
                ('hic_yield', models.BigIntegerField(blank=True, null=True, verbose_name='Hi-C yield')),
                ('short_yield', models.BigIntegerField(blank=True, null=True, verbose_name='Short read yield')),
                ('rnaseq_numlibs', models.IntegerField(blank=True, null=True, verbose_name='RNAseq libs')),
                ('ont_ena', models.CharField(blank=True, max_length=12, null=True, verbose_name='ONT Accession')),
                ('hifi_ena', models.CharField(blank=True, max_length=12, null=True, verbose_name='HiFi Accession')),
                ('hic_ena', models.CharField(blank=True, max_length=12, null=True, verbose_name='Hi-C Accession')),
                ('short_ena', models.CharField(blank=True, max_length=12, null=True, verbose_name='Short read Accession')),
                ('rnaseq_ena', models.CharField(blank=True, max_length=12, null=True, verbose_name='RNAseq Accession')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='status.Sequencing', verbose_name='Sequencing project')),
            ],
            options={
                'verbose_name_plural': 'reads',
            },
        ),
        migrations.CreateModel(
            name='GenomeTeam',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('annotation_team', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='status.AnnotationTeam', verbose_name='annotation team')),
                ('assembly_team', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='status.AssemblyTeam', verbose_name='assembly team')),
                ('collection_team', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='status.CollectionTeam', verbose_name='collection team')),
                ('sample_coordinator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='status.Person', verbose_name='sample_coordinator')),
                ('sequencing_team', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='status.SequencingTeam', verbose_name='sequencing team')),
                ('species', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='status.TargetSpecies', verbose_name='species')),
                ('taxonomy_team', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='status.TaxonomyTeam', verbose_name='taxonomy team')),
            ],
            options={
                'verbose_name_plural': 'genome teams',
            },
        ),
        migrations.CreateModel(
            name='CurationTeam',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
                ('affiliation', models.CharField(max_length=100)),
                ('lead', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='curation_team_lead', to='status.Person')),
            ],
            options={
                'verbose_name_plural': 'curation teams',
            },
        ),
        migrations.CreateModel(
            name='Curation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('Waiting', 'Waiting'), ('Curating', 'Curating'), ('Done', 'Done'), ('Sent', 'Sent'), ('Issue', 'Issue')], default='Waiting', help_text='Status', max_length=12)),
                ('note', models.CharField(blank=True, help_text='Notes', max_length=300, null=True)),
                ('species', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='status.TargetSpecies', verbose_name='species')),
                ('team', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='status.CurationTeam', verbose_name='curation team')),
            ],
            options={
                'verbose_name_plural': 'curation',
            },
        ),
        migrations.CreateModel(
            name='CommonNames',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
                ('species', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='status.TargetSpecies', verbose_name='Genus/species')),
            ],
            options={
                'verbose_name_plural': 'common names',
            },
        ),
        migrations.AddField(
            model_name='collectionteam',
            name='coordinator',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='collection_team_lead', to='status.Person'),
        ),
        migrations.AddField(
            model_name='assemblyteam',
            name='contact',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assembly_team_lead', to='status.Person'),
        ),
        migrations.CreateModel(
            name='AssemblyProject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('Waiting', 'Waiting'), ('Assembling', 'Assembling'), ('Contigs', 'Contigs'), ('Scaffolding', 'Scaffolding'), ('Scaffolds', 'Scaffolds'), ('Curating', 'Curating'), ('Done', 'Done'), ('Submitted', 'Submitted'), ('Issue', 'Issue')], default='Waiting', help_text='Status', max_length=12)),
                ('note', models.CharField(blank=True, help_text='Notes', max_length=300, null=True)),
                ('species', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='status.TargetSpecies', verbose_name='species')),
                ('team', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='status.AssemblyTeam', verbose_name='assembly team')),
            ],
            options={
                'verbose_name_plural': 'assembly projects',
            },
        ),
        migrations.CreateModel(
            name='Assembly',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(blank=True, max_length=100, null=True)),
                ('type', models.CharField(choices=[('Primary', 'Pseudohaploid Primary'), ('Alternate', 'Pseudohaploid Alternate'), ('Hap1', 'Phased Haplotype 1'), ('Hap2', 'Phased Haplotype 2'), ('Maternal', 'Trio-phased Maternal'), ('Paternal', 'Trio-phased Paternal'), ('MT', 'Mitogenome'), ('Chloroplast', 'Chloroplast'), ('Endosymbiont', 'Endosymbiont')], default='Primary', help_text='Type of assembly', max_length=20)),
                ('span', models.BigIntegerField(blank=True, null=True, verbose_name='Assembly span')),
                ('contig_n50', models.BigIntegerField(blank=True, null=True, verbose_name='Contig N50')),
                ('scaffold_n50', models.BigIntegerField(blank=True, null=True, verbose_name='Scaffold N50')),
                ('chromosome_level', models.NullBooleanField(verbose_name='Chr level')),
                ('percent_placed', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True, verbose_name='Pct. placed')),
                ('busco', models.CharField(blank=True, max_length=60, null=True, verbose_name='BUSCO')),
                ('qv', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True, verbose_name='QV')),
                ('busco_db', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='status.BUSCOdb', verbose_name='BUSCO db')),
                ('busco_version', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='status.BUSCOversion', verbose_name='BUSCO version')),
                ('pipeline', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='status.AssemblyPipeline', verbose_name='Assembly pipeline')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='status.AssemblyProject', verbose_name='Assembly project')),
            ],
            options={
                'verbose_name_plural': 'assemblies',
            },
        ),
        migrations.AddField(
            model_name='annotationteam',
            name='lead',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='annotation_team_lead', to='status.Person'),
        ),
        migrations.CreateModel(
            name='Annotation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('Waiting', 'Waiting'), ('Annotating', 'Annotating'), ('Done', 'Done'), ('Sent', 'Sent'), ('Issue', 'Issue')], default='Waiting', help_text='Status', max_length=12)),
                ('note', models.CharField(blank=True, help_text='Notes', max_length=300, null=True)),
                ('species', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='status.TargetSpecies', verbose_name='species')),
                ('team', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='status.AnnotationTeam', verbose_name='annotation team')),
            ],
            options={
                'verbose_name_plural': 'annotation',
            },
        ),
    ]
